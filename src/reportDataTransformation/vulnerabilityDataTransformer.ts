import { MergedVulnerabilityComponentResult, Vulnerability, VulnerabilityScannedComponent } from "../types/vulnerabilityTypes";

// Make sure that every scanned result has a vulnerability
// Discard all scanning targets that have no vulnerabilities
export function getVulnerableComponents(scannedComponents: VulnerabilityScannedComponent[]) {
  // remove all entries that have no results
  let targetableComponents = scannedComponents.filter((component) => component.hasOwnProperty("Results"));

  // Merge the scanned Components (parent) with its results (child)
  let scanResults: MergedVulnerabilityComponentResult[] = [];
  targetableComponents.forEach((component) => (scanResults = scanResults.concat(mergeResultWithEntry(component))));

  // remove all non vulnerable results
  let vulnerableResults = scanResults.filter((result) => result.Vulnerabilities != undefined);

  // Merge the targetable Components (parent) with its vulnerabilies (child)
  let vulnerabilities: Vulnerability[] = [];
  vulnerableResults.forEach((result) => (vulnerabilities = vulnerabilities.concat(mergeVulnerabilityWithResult(result))));

  return vulnerabilities;
}

// remove nesting
function mergeResultWithEntry(scannedComponent: VulnerabilityScannedComponent): MergedVulnerabilityComponentResult[] {
  const merged: MergedVulnerabilityComponentResult[] = [];
  scannedComponent.Results!.forEach((result) => {
    merged.push({
      Kind: scannedComponent.Kind,
      Name: scannedComponent.Name,
      Namespace: scannedComponent.Namespace,
      Class: result.Class,
      Target: result.Target,
      Type: result.Type,
      Vulnerabilities: result.Vulnerabilities,
    });
  });
  return merged;
}

// Remove nesting
function mergeVulnerabilityWithResult(result: MergedVulnerabilityComponentResult) {
  const merged: Vulnerability[] = [];

  result.Vulnerabilities!.forEach((vulnerability) => {
    merged.push({
      Kind: result.Kind,
      Name: result.Name,
      Namespace: result.Namespace,
      Class: result.Class,
      Target: result.Target,
      Type: result.Type,
      VulnerabilityID: vulnerability.VulnerabilityID,
      Title: vulnerability.Title,
      SeveritySource: vulnerability.SeveritySource,
      Severity: vulnerability.Severity,
      References: vulnerability.References,
      PublishDate: vulnerability.PublishDate,
      PrimaryURL: vulnerability.PrimaryURL,
      PkgName: vulnerability.PkgName,
      Layer: vulnerability.Layer,
      LastModifiedDate: vulnerability.LastModifiedDate,
      InstalledVersion: vulnerability.InstalledVersion,
      FixedVersion: vulnerability.FixedVersion,
      Description: vulnerability.Description,
      Datasource: vulnerability.Datasource,
      CweIDs: vulnerability.CweIDs,
      CVSS: vulnerability.CVSS,
    });
  });
  return merged;
}
