import { existsSync, mkdirSync, writeFileSync } from "fs";
import { readFile } from "fs/promises";
import { outDir, vulnTemplate } from "../consts.js";
import { Vulnerability } from "../types/vulnerabilityTypes.js";
import { reformatString, sanitiseStringForMarkdown } from "../utils.js";

export async function createVulnerabilityFiles(vulnerabilities: Vulnerability[]) {
  const vulnerabilityMarkdownTemplate = (await readFile(vulnTemplate)).toString();

  vulnerabilities.forEach((vuln, index) => {
    let markdown = buildVulnMarkdown(vulnerabilityMarkdownTemplate, vuln);

    // create directory
    let dir = outDir + "/" + "Vulnerabilities" + "/" + vuln.Severity + "/" + vuln.Namespace;
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true });
    }
    writeFileSync(dir + "/" + vuln.VulnerabilityID + "-" + index + ".md", markdown);
  });
}

// Every part that is to be replaced has _+first char as lowercase in the template
// ex: JSON Field Class is represented by _class in the template. _class will be replaced by the value of the Class field in the JSON object
function buildVulnMarkdown(template: string, vulnerabilitiy: Vulnerability) {
  for (const [key, value] of Object.entries(vulnerabilitiy)) {
    const replaceString = reformatString(key);
    const regexp = new RegExp(`${replaceString}`, "gi");

    // convert object into json format
    if (typeof value === "object" && !Array.isArray(value)) {
      let objString = JSON.stringify(value, null, 2);
      template = template.replace(regexp, objString);
    }

    // create expandable markdown list element
    if (Array.isArray(value) && replaceString !== "_title_string") {
      let arrayString = '{{%expand "' + key + '" %}}\n\n';
      value.forEach((element) => {
        arrayString = arrayString + "- " + element + "\n";
      });
      arrayString = arrayString + "{{% /expand%}}\n";
      template = template.replace(regexp, arrayString);

      // simply exchange template with object value
    }
    if (replaceString === "_title_string") {
      let stringToReplace = sanitiseStringForMarkdown(vulnerabilitiy.Name + "-" + vulnerabilitiy.VulnerabilityID);
      template = template.replace(regexp, stringToReplace);
    } else {
      let stringToReplace = sanitiseStringForMarkdown(value);
      template = template.replace(regexp, stringToReplace);
    }
  }

  return template;
}
